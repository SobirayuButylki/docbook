module Docbook
  module Adapters
    module Epub
      # Interface for FO-PDF processors, for taking FO output created by the XML processor and converting it to various formats. This class
      # should be extended to control the various formats.
      module Dbtoepub
    
        # initialize the object and set the extensions and output type. Defaults to PDF
        def initialize(args = {})
          super
          @css_stylesheet = "xsl/epub.css"
          
        end
    
        def xml_cmd
           cmd = "ruby #{self.root}/xsl/epub/bin/dbtoepub -c #{@css_stylesheet} -s #{@xsl_stylesheet} #{self.file}.xml"
        end
    
        def before_render
          xsl_path = @windows ? self.root : self.root.lchop
      
          xml = %Q{<?xml version='1.0'?>

          <!-- DO NOT CHANGE THIS FILE. IT IS AUTOGENERATED BY THE SHORT-ATTENTION-SPAN-DOCBOOK CHAIN -->

          <xsl:stylesheet 
             xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"
             xmlns:fo="http://www.w3.org/1999/XSL/Format"
             xmlns:xslthl="http://xslthl.sf.net"
             xmlns:d="http://docbook.org/ns/docbook"
          >
            <!-- Import the original FO stylesheet -->
            <xsl:import href="file:///#{xsl_path}/xsl/epub/docbook.xsl"/>
            <xsl:import href="file:///#{xsl_path}/xsl/fo/highlight.xsl"/>
      
            <!-- FOP -->
   
          }
      
          xml << %Q{
            <xsl:param name="show.comments" select="1"></xsl:param>
            <xsl:param name="draft.watermark.image">http://docbook.sourceforge.net/release/images/draft.png</xsl:param>
            <xsl:param name="draft.mode">yes</xsl:param>
          } if @draft
      
          xml << "</xsl:stylesheet>"
      
          File.open("xsl/epub_base.xml", "w") do |f|
            f << xml
          end
        end
    

      end
    end
  end
end