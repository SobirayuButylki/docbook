#!/usr/bin/env ruby

require File.expand_path(File.join(File.dirname(__FILE__), "lib/generator"))

def show_instructions
  text = %Q{Docbook Generator (C) 2008 Brian Hogan
    =================================================
    Creates a docbook project, chapter, or article skeleton.
   
    generate book | chapter | article <path> (no extension)
   
    Example:  generate book my_book
            - my_book/images
            - my_book/images/src
            - my_book/cover
            - my_book/xsl
            - my_book/xsl/pdf.xsl
            - my_book/book.xml
            - my_book/chapter01.xml
            - my_book/make
            
         or:  generate chapter chapter02
            - ./chapter02.xml
         
         or: generate chapter chapter02/fun_stuff
            - chapter02/fun_stuff.xml
         
         or:  generate article learning_rails
           - learning_rails/images
           - learning_rails/xsl
           - learning_rails/xsl/pdf.xml
           - learning_rails/make
           - learning_rails/article.xml
                        
    You can get a sample book as well with contents
    Example: generate book my_book with_sample

    }
    puts text
end
  
if ARGV[0].nil?
  show_instructions
elsif ARGV[0] == "-v" || ARGV[0] == "--version"
  puts "#{DocbookVersion.to_s}"
else
  root_path =  File.dirname(__FILE__)
  
  puts root_path
  type = ARGV[0]
  output_path = ARGV[1]
  sample = ARGV[2].include? "sample" rescue false

  Docbook::Generator.new(type, root_path, output_path, :sample => sample, :verbose => true).generate
end